#!/usr/bin/env node

const fs = require('fs');
const path = require('path').posix;
const { spawnSync } = require('child_process');

// TODO: output resource declarations for ResourceLoader
// TODO: link management after transforms, detect external links

function error(message) {
    process.stderr.write(`\x1b[31mError:\x1b[0m ${message}\n`);
    process.exit(1);
}

function warning(message) {
    process.stderr.write(`\x1b[33mWarning:\x1b[0m ${message}\n`);
}

process.on('uncaughtException', e => error(e.message));

const parts = [];

function isSubpath(basePath, childPath) {
    return !path.relative(basePath, childPath).startsWith('..');
}

function selectParts(basePath) {
    return parts
        .filter(part => isSubpath(basePath, part.path))
        .map(part => ({ ...part })); // copy so that we can change them
}

function writeParts(newParts) {
    for (const part of newParts) {
        if (!path.isAbsolute(part.path)) {
            error([
                `Part path is not absolute: ${part.path}`,
                `Defined in: ${part.source}`,
            ].join('\n'));
        }

        const existingParts = selectParts(part.path);
        if (existingParts.length > 0) {
            error([
                `Cannot write part ${part.path}`,
                `Defined in: ${part.source}`,
                `Existing parts:`,
                ...existingParts.map(existing =>
                    `${existing.path} (defined in ${existing.source})`),
            ].join('\n'));
        }

        parts.push(part);
    }
}

function parseParts(part) {
    const partRegex = /^.*#part\s+(\S+).*$/gm;
    const linkRegex = /^.*#link\s+(\S+).*$/gm;
    const split = part.content.toString().split(partRegex);
    let parts = [];
    for (let i = 1; i < split.length; i += 2) {
        const partPath = split[i];
        const stringContent = split[i + 1].trim() + '\n';
        const content = Buffer.from(stringContent);
        const links = [...stringContent.matchAll(linkRegex)].map(match => match[1]);
        const source = part.source;
        parts.push({ path: partPath, source, content, links });
    }
    return parts;
}

// TODO: maybe push toposort to writeParts?
function toposort(parts) {
    let sorted = [];
    let visited = [];
    let processing = [];

    parts.forEach(function visit(part) {
        if (visited.includes(part)) return;
        if (processing.includes(part)) {
            error([
                `Cyclic links:`,
                ...processing.map(part => part.path),
            ].join('\n'));
        }

        processing.push(part);
        for (const link of part.links) {
            const resolvedLink = path.resolve(path.dirname(part.path), link);
            const linkedParts = parts.filter(other => isSubpath(resolvedLink, other.path));
            if (linkedParts.length === 0) {
                if (path.isAbsolute(link)) {
                    //warning(`External link in ${part.path}: ${link}`);
                } else {
                    // TODO: currently, external relative link check does not
                    // take into account the parts that are not passed into toposort
                    error(`External relative link in ${part.path}: ${link}`);
                }
            }
            linkedParts.forEach(part => visit(part));
        }
        processing.pop();

        visited.push(part);
        sorted.push(part);
    });

    return sorted;
}

function transformParts(parts, mode, command, args) {
    let outputParts = [];

    if (mode === 'each') {
        outputParts = parts.map(part => ({
            path    : part.path,
            source  : part.source,
            content : Buffer.from(part.content),
            links   : part.links, // TODO: what to do with original links?
        }));
    } else if (mode === 'concat') {
        outputParts = [{
            path    : '',
            source  : 'concat',
            content : Buffer.concat(parts.map(part => part.content)),
            links   : [], // TODO: what to do with original links?
        }];
    } else if (mode === 'json') {
        let json = {};
        for (const part of parts) {
            const keys = part.path.split('/');
            const name = keys.pop();
            let object = json;
            for (const key of keys) {
                object[key] = object[key] || {};
                object = object[key];
            }
            object[name] = part.content.toString();
        }
        outputParts = [{
            path    : '',
            source  : 'json',
            content : Buffer.from(JSON.stringify(json)),
            links   : [], // TODO: what to do with original links?
        }];
    } else {
        error(`Invalid mode ${mode}`);
    }

    if (command) {
        for (const part of outputParts) {
            const result = spawnSync(command, args, { input: part.content });
            if (result.error) {
                error(result.error.message);
            }
            if (result.status !== 0) {
                error(`Transform failed: ${command}`);
            }
            part.content = result.stdout;
            part.source = command;
        }
    }

    return outputParts;
}

const configPath = process.argv.length > 2 ? process.argv[2] : 'packer.json';
const config = JSON.parse(fs.readFileSync(configPath));
process.chdir(path.dirname(configPath));

function getFilePaths(filePath, recursive = false, filter = '.*') {
    if (fs.lstatSync(filePath).isDirectory()) {
        if (recursive) {
            return fs.readdirSync(filePath)
                .map(p => path.join(filePath, p))
                .map(p => getFilePaths(p, recursive)).flat();
        } else {
            return fs.readdirSync(filePath)
                .map(p => path.join(filePath, p))
                .filter(p => !fs.lstatSync(p).isDirectory());
        }
    } else {
        return [ filePath ];
    }
}

for (const spec of config.input) {
    const filterRe = new RegExp(spec.filter || '.*');
    const filePaths = getFilePaths(spec.input, spec.recursive)
        .filter(p => filterRe.test(p));
    if (filePaths.length === 0) {
        warning(`File path ${spec.input} does not contain any files under filter ${spec.filter}`);
    }
    for (const filePath of filePaths) {
        if (filePath.includes('UEAM')) {
            console.log('UEAM')
        }
        const inputPart = {
            path    : path.relative(spec.input, filePath),
            source  : filePath,
            content : fs.readFileSync(filePath),
            links   : [],
        };
        const outputParts = spec.parse ? parseParts(inputPart) : [ inputPart ];
        for (const part of outputParts) {
            part.path = path.join(spec.output || '/', part.path);
        }
        writeParts(outputParts);
    }
}

function selectAndTransformParts(spec) {
    const selectedParts = toposort(selectParts(spec.input));
    if (selectedParts.length === 0) {
        warning(`No parts in ${spec.input}`);
    }
    for (const part of selectedParts) {
        part.path = path.relative(spec.input, part.path);
    }
    const transformedParts = transformParts(selectedParts, spec.mode, spec.command, spec.args);
    for (const part of transformedParts) {
        part.path = path.join(spec.output, part.path);
    }
    return transformedParts;
}

for (const spec of config.transform) {
    const transformedParts = selectAndTransformParts(spec);
    writeParts(transformedParts);
}

for (const spec of config.output) {
    const transformedParts = selectAndTransformParts(spec);
    for (const part of transformedParts) {
        fs.mkdirSync(path.dirname(part.path), { recursive: true });
        fs.writeFileSync(part.path, part.content);
    }
}
